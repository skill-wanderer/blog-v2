
<section class="bg-skill-wanderer-article-bg py-16 px-4 border-t border-gray-200">
  <div class="max-w-4xl mx-auto text-center">
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-8 md:p-12">
      <h2 class="text-2xl md:text-3xl font-bold text-skill-wanderer-article-headings mb-4">
        Stay Updated
      </h2>
      <p class="text-base md:text-lg text-gray-700 mb-8 leading-relaxed">
        Get the latest tech insights and learning resources delivered to your inbox. 
        No spam, just valuable content for your development journey.
      </p>
      
      <form id="newsletter-form" class="max-w-lg mx-auto">
        <div class="flex flex-col sm:flex-row gap-3">
          <div class="flex-1">
            <input 
              type="email" 
              id="email-input"
              placeholder="Enter your email address"
              required
              class="w-full px-4 py-3 rounded-md border border-gray-300 focus:border-skill-wanderer-primary-orange focus:outline-none focus:ring-1 focus:ring-skill-wanderer-primary-orange transition-colors text-gray-900 bg-white"
            />
          </div>
          <button 
            type="submit"
            id="subscribe-btn"
            class="px-6 py-3 bg-gray-900 text-white font-medium rounded-md hover:bg-gray-700 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-skill-wanderer-primary-orange focus:ring-offset-2"
          >
            Subscribe
          </button>
        </div>
      </form>
      
      <!-- Success/Error Messages -->
      <div id="message-container" class="mt-6 hidden">
        <div id="success-message" class="bg-green-50 border border-green-200 text-green-800 px-4 py-3 rounded-md hidden">
          <div class="flex items-center gap-2">
            <span class="text-lg">‚úÖ</span>
            <span>Thanks for subscribing! We'll be in touch soon.</span>
          </div>
        </div>
        <div id="error-message" class="bg-red-50 border border-red-200 text-red-800 px-4 py-3 rounded-md hidden">
          <div class="flex items-center gap-2">
            <span class="text-lg">‚ùå</span>
            <span id="error-text">Something went wrong. Please try again.</span>
          </div>
        </div>
      </div>
      
      <!-- Newsletter Benefits -->
      <div class="mt-8 flex flex-wrap justify-center gap-6 text-gray-600 text-sm">
        <div class="flex items-center gap-2">
          <span class="text-lg">üìö</span>
          <span>Weekly insights</span>
        </div>
        <div class="flex items-center gap-2">
          <span class="text-lg">üíª</span>
          <span>Latest tutorials</span>
        </div>
        <div class="flex items-center gap-2">
          <span class="text-lg">üí°</span>
          <span>Tech tips</span>
        </div>
      </div>
      
      <p class="mt-6 text-xs text-gray-500">
        Unsubscribe anytime ‚Ä¢ No spam, we promise
      </p>
    </div>
  </div>
</section>

<script>
  import { firestoreService } from '../lib/firebase-services';
  import { blogAnalytics } from '../lib/analytics';

  // Newsletter subscription form handler
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('newsletter-form') as HTMLFormElement;
    const emailInput = document.getElementById('email-input') as HTMLInputElement;
    const subscribeBtn = document.getElementById('subscribe-btn') as HTMLButtonElement;
    const messageContainer = document.getElementById('message-container') as HTMLDivElement;
    const successMessage = document.getElementById('success-message') as HTMLDivElement;
    const errorMessage = document.getElementById('error-message') as HTMLDivElement;
    const errorText = document.getElementById('error-text') as HTMLSpanElement;

    if (!form || !emailInput || !subscribeBtn) {
      console.warn('Newsletter form elements not found');
      return;
    }

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const email = emailInput.value.trim();
      
      if (!email) {
        showError('Please enter your email address.');
        return;
      }

      // Validate email format
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(email)) {
        showError('Please enter a valid email address.');
        return;
      }

      // Set loading state
      setLoading(true);
      
      try {
        // Add subscriber to Firestore
        await firestoreService.addSubscriber({
          email: email,
          source: 'blog-v2'
        });

        // Track subscription event
        blogAnalytics.trackNewsletterSignup('footer-subscription');
        
        // Show success message
        showSuccess();
        
        // Reset form
        form.reset();
        
      } catch (error) {
        console.error('Subscription error:', error);
        
        // Handle specific error types
        if (error instanceof Error) {
          if (error.message.includes('already exists') || error.message.includes('duplicate')) {
            showError('This email is already subscribed!');
          } else if (error.message.includes('network') || error.message.includes('fetch')) {
            showError('Network error. Please check your connection and try again.');
          } else {
            showError('Failed to subscribe. Please try again later.');
          }
        } else {
          showError('An unexpected error occurred. Please try again.');
        }
      } finally {
        setLoading(false);
      }
    });

    function setLoading(loading: boolean) {
      subscribeBtn.disabled = loading;
      subscribeBtn.textContent = loading ? 'Subscribing...' : 'Subscribe';
      emailInput.disabled = loading;
      
      if (loading) {
        subscribeBtn.classList.add('opacity-75', 'cursor-not-allowed');
      } else {
        subscribeBtn.classList.remove('opacity-75', 'cursor-not-allowed');
      }
    }

    function showSuccess() {
      messageContainer.classList.remove('hidden');
      successMessage.classList.remove('hidden');
      errorMessage.classList.add('hidden');
      
      // Auto-hide after 5 seconds
      setTimeout(() => {
        messageContainer.classList.add('hidden');
      }, 5000);
    }

    function showError(message: string) {
      errorText.textContent = message;
      messageContainer.classList.remove('hidden');
      errorMessage.classList.remove('hidden');
      successMessage.classList.add('hidden');
      
      // Auto-hide after 7 seconds
      setTimeout(() => {
        messageContainer.classList.add('hidden');
      }, 7000);
    }

    // Track form view
    blogAnalytics.trackCustomEvent('newsletter_form_view', {
      location: 'footer',
      page: window.location.pathname
    });
  });
</script>

<style>
  /* Custom checkbox styling */
  input[type="checkbox"] {
    accent-color: #FF6B35;
  }
  
  /* Subtle focus styles for accessibility */
  input:focus, button:focus {
    box-shadow: 0 0 0 2px rgba(255, 107, 53, 0.1);
  }
  
  /* Smooth transitions */
  input, button {
    transition: all 0.2s ease;
  }
  
  /* Button hover state */
  button:hover {
    transform: translateY(-1px);
  }
  
  /* Email input styling */
  input[type="email"] {
    background: #ffffff;
  }
  
  input[type="email"]:focus {
    background: #ffffff;
  }
</style>
