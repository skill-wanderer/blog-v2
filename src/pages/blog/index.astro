---
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import { BLOG_CATEGORIES, getCategoryDisplayName } from '../../constants/categories.ts';
import { Image } from 'astro:assets';

// Get all posts
const allPosts = await getCollection('posts', ({ data }) => {
    // Filter out draft posts if you have a draft field
    // return data.draft !== true;
    return true; // Assuming all posts in the collection are to be included
});

// Sort posts by publishDate in descending order
const sortedPosts = allPosts.sort((a, b) => new Date(b.data.publishDate).getTime() - new Date(a.data.publishDate).getTime());
---

<BaseLayout title="All Blog Posts - Skill-Wanderer" description="Browse all blog posts from Skill-Wanderer.">
    <div class="bg-skill-wanderer-darkest text-skill-wanderer-text-dark py-12 md:py-16">
        <div class="container mx-auto px-4 sm:px-6 lg:px-8">
            <h1 class="text-4xl md:text-5xl font-bold mb-12 text-center text-skill-wanderer-text-dark">
                All Blog Posts
            </h1>

            <!-- Filter Section -->
            <div class="mb-8 bg-skill-wanderer-card-dark rounded-lg p-6">
                <div class="flex flex-col md:flex-row gap-4 items-center">
                    <!-- Search Input -->
                    <div class="flex-grow w-full md:w-auto">
                        <input 
                            type="text" 
                            id="searchInput" 
                            placeholder="Search posts by title or description..." 
                            class="w-full px-4 py-3 rounded-lg bg-skill-wanderer-secondary-dark text-skill-wanderer-text-dark border border-dark focus:border-skill-wanderer-primary-orange focus:outline-none transition-colors"
                        />
                    </div>
                      <!-- Category Filter -->
                    <div class="flex flex-wrap gap-2">
                        <button 
                            class="category-filter active px-6 py-3 rounded-full bg-skill-wanderer-primary-orange text-white font-semibold transition-all duration-300 hover:shadow-lg" 
                            data-category="all"
                        >
                            All
                        </button>                        {BLOG_CATEGORIES.map(category => (
                            <button 
                                class="category-filter px-6 py-3 rounded-full bg-transparent border-2 border-skill-wanderer-primary-orange text-skill-wanderer-primary-orange font-semibold hover:bg-skill-wanderer-primary-orange hover:text-white transition-all duration-300" 
                                data-category={category}
                            >
                                {getCategoryDisplayName(category)}
                            </button>
                        ))}
                    </div>
                </div>
            </div>

            <!-- Posts Count -->
            <div class="mb-6">
                <p id="postCount" class="text-skill-wanderer-text-dark-secondary">
                    Showing {sortedPosts.length} posts
                </p>
            </div>

            <!-- Posts Grid -->
            <div id="postsContainer">
                {sortedPosts.length > 0 ? (
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8" id="postsGrid">
                        {sortedPosts.map(post => (
                            <article 
                                class="post-card block bg-skill-wanderer-card-dark rounded-lg overflow-hidden group hover:shadow-xl transition-shadow duration-300 flex flex-col h-full"
                                data-category={post.data.category || ''}
                                data-title={post.data.title.toLowerCase()}
                                data-description={post.data.description?.toLowerCase() || ''}
                            >                                <a href={`/blog/${post.slug}/`} class="flex flex-col h-full">
                                    {post.data.image && (
                                        <Image 
                                            src={post.data.image} 
                                            alt={post.data.title} 
                                            class="w-full h-48 object-cover group-hover:scale-105 transition-transform duration-300"
                                            width={400}
                                            height={192}
                                        />
                                    )}
                                    <div class="p-6 flex-grow flex flex-col">
                                        <div class="flex justify-between items-center mb-3 text-xs">
                                            {post.data.category && <span class="text-skill-wanderer-primary-orange uppercase font-bold tracking-wider">{post.data.category}</span>}
                                            <span class="text-skill-wanderer-text-dark-muted">
                                                {new Date(post.data.publishDate).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}
                                            </span>
                                        </div>
                                        <h3 class="text-xl lg:text-2xl font-bold mb-3 text-skill-wanderer-text-dark group-hover:text-skill-wanderer-primary-orange transition-colors duration-300 flex-grow">{post.data.title}</h3>
                                        {post.data.description && <p class="text-sm text-skill-wanderer-text-dark-secondary mb-4 line-clamp-3 flex-grow">{post.data.description}</p>}
                                        <div class="mt-auto pt-2">
                                            <span class="text-skill-wanderer-primary-orange group-hover:underline font-semibold text-sm">Read more â†’</span>
                                        </div>
                                    </div>
                                </a>
                            </article>
                        ))}
                    </div>
                ) : (
                    <p class="text-skill-wanderer-text-dark-secondary mt-8 text-center">No posts available at the moment.</p>
                )}
                
                <!-- No Results Message -->                <div id="noResults" class="hidden text-center py-12">
                    <p class="text-skill-wanderer-text-dark-secondary text-lg mb-4">No posts found matching your criteria.</p>
                    <button id="clearFilters" class="bg-skill-wanderer-primary-orange text-white px-6 py-3 rounded-full font-semibold hover:shadow-lg transition-all duration-300">
                        Clear Filters
                    </button>
                </div>
            </div>
        </div>
    </div>    <script>
        // Filter functionality
        const searchInput = document.getElementById('searchInput') as HTMLInputElement;
        const categoryFilters = document.querySelectorAll('.category-filter');
        const postCards = document.querySelectorAll('.post-card') as NodeListOf<HTMLElement>;
        const postCount = document.getElementById('postCount');
        const noResults = document.getElementById('noResults');
        const clearFiltersBtn = document.getElementById('clearFilters');
        const postsGrid = document.getElementById('postsGrid');

        let currentCategory = 'all';
        let currentSearch = '';

        // Check URL parameters on page load
        function initializeFromURL() {
            const urlParams = new URLSearchParams(window.location.search);
            const categoryParam = urlParams.get('category');
            
            if (categoryParam) {
                currentCategory = categoryParam;
                  // Update active category filter
                categoryFilters.forEach(f => {
                    f.classList.remove('active', 'bg-skill-wanderer-primary-orange', 'text-white');
                    f.classList.add('bg-transparent', 'border-2', 'border-skill-wanderer-primary-orange', 'text-skill-wanderer-primary-orange');
                });
                
                const targetFilter = document.querySelector(`[data-category="${categoryParam}"]`);
                if (targetFilter) {
                    targetFilter.classList.add('active', 'bg-skill-wanderer-primary-orange', 'text-white');
                    targetFilter.classList.remove('bg-transparent', 'border-2', 'border-skill-wanderer-primary-orange', 'text-skill-wanderer-primary-orange');
                }
            }
            
            filterPosts();
        }

        function filterPosts() {
            let visibleCount = 0;
            
            postCards.forEach(card => {
                const cardCategory = card.getAttribute('data-category') || '';
                const cardTitle = card.getAttribute('data-title') || '';
                const cardDescription = card.getAttribute('data-description') || '';
                
                const matchesCategory = currentCategory === 'all' || cardCategory === currentCategory;
                const matchesSearch = currentSearch === '' || 
                    cardTitle.includes(currentSearch) || 
                    cardDescription.includes(currentSearch);
                
                if (matchesCategory && matchesSearch) {
                    card.style.display = 'block';
                    visibleCount++;
                } else {
                    card.style.display = 'none';
                }
            });

            // Update post count
            if (postCount) {
                postCount.textContent = `Showing ${visibleCount} posts`;
            }
            
            // Show/hide no results message
            if (visibleCount === 0) {
                if (postsGrid) postsGrid.style.display = 'none';
                if (noResults) noResults.classList.remove('hidden');
            } else {
                if (postsGrid) postsGrid.style.display = 'grid';
                if (noResults) noResults.classList.add('hidden');
            }
        }

        // Search input event
        if (searchInput) {
            searchInput.addEventListener('input', (e) => {
                const target = e.target as HTMLInputElement;
                if (target) {
                    currentSearch = target.value.toLowerCase();
                    filterPosts();
                }
            });
        }

        // Category filter events
        categoryFilters.forEach(filter => {
            filter.addEventListener('click', (e) => {
                const target = e.target as HTMLButtonElement;
                if (!target) return;
                  // Remove active class from all filters
                categoryFilters.forEach(f => {
                    f.classList.remove('active', 'bg-skill-wanderer-primary-orange', 'text-white');
                    f.classList.add('bg-transparent', 'border-2', 'border-skill-wanderer-primary-orange', 'text-skill-wanderer-primary-orange');
                });
                
                // Add active class to clicked filter
                target.classList.add('active', 'bg-skill-wanderer-primary-orange', 'text-white');
                target.classList.remove('bg-transparent', 'border-2', 'border-skill-wanderer-primary-orange', 'text-skill-wanderer-primary-orange');
                
                currentCategory = target.getAttribute('data-category') || 'all';
                
                // Update URL
                const url = new URL(window.location.href);
                if (currentCategory === 'all') {
                    url.searchParams.delete('category');
                } else {
                    url.searchParams.set('category', currentCategory);
                }
                window.history.pushState({}, '', url.toString());
                
                filterPosts();
            });
        });

        // Clear filters event
        if (clearFiltersBtn) {
            clearFiltersBtn.addEventListener('click', () => {
                currentSearch = '';
                currentCategory = 'all';

                if (searchInput) {
                    searchInput.value = '';
                }
                  // Reset category filters
                categoryFilters.forEach(f => {
                    f.classList.remove('active', 'bg-skill-wanderer-primary-orange', 'text-white');
                    f.classList.add('bg-transparent', 'border-2', 'border-skill-wanderer-primary-orange', 'text-skill-wanderer-primary-orange');
                });
                
                // Set "All" as active
                const allFilter = document.querySelector('[data-category="all"]');
                if (allFilter) {
                    allFilter.classList.add('active', 'bg-skill-wanderer-primary-orange', 'text-white');
                    allFilter.classList.remove('bg-transparent', 'border-2', 'border-skill-wanderer-primary-orange', 'text-skill-wanderer-primary-orange');
                }
                
                // Update URL
                const url = new URL(window.location.href);
                url.searchParams.delete('category');
                window.history.pushState({}, '', url.toString());
                
                filterPosts();
            });
        }

        // Initialize on page load
        initializeFromURL();
    </script>
</BaseLayout>
