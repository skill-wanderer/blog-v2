---
import BaseLayout from './BaseLayout.astro';
import TableOfContents from '../components/TableOfContents.astro';
import AuthorBio from '../components/AuthorBio.astro';
import ShareButtons from '../components/ShareButtons.astro';
import RelatedPosts from '../components/RelatedPosts.astro';
import { Image } from 'astro:assets';
import type { BlogCategory } from '../constants/categories.ts';
import { getCategoryDisplayName, BLOG_CATEGORIES } from '../constants/categories.ts';
import { getAuthor, type Author } from '../constants/authors.ts';
import { calculateWordCount, calculateReadingTime } from '../utils/seo.ts';

export interface BlogPost {
  title: string;
  description: string;
  authorId: string;
  publishDate: string;
  modifiedDate?: string;
  category: BlogCategory;
  readTime: string;
  image?: string;
  tags?: string[];
  wordCount?: number;
}

export interface TOCItem {
  id: string;
  text: string;
  level: number;
}

interface Props {
  post?: BlogPost;
  // Expect Astro's native MarkdownHeading array from the page using the layout
  headings?: { depth: number, slug: string, text: string }[]; 
  relatedPosts?: any[];
  currentSlug?: string;  // Add frontmatter props for direct markdown usage
  title?: string;
  description?: string;
  authorId?: string;
  publishDate?: string;
  modifiedDate?: string;
  category?: BlogCategory;
  readTime?: string;
  image?: string;
  tags?: string[];
  wordCount?: number;
}

const { 
  post, 
  headings: rawHeadingsFromPage = [], // Renamed to clarify it's Astro's raw headings
  relatedPosts = [], 
  currentSlug, 
  ...frontmatter 
} = Astro.props;

// Use post if available, otherwise construct from frontmatter
const blogPost = post || {
  title: frontmatter.title || 'Untitled',  
  description: frontmatter.description || '',
  authorId: frontmatter.authorId || 'quan-nguyen',
  publishDate: frontmatter.publishDate || '',
  modifiedDate: frontmatter.modifiedDate,
  category: frontmatter.category || BLOG_CATEGORIES[0],
  readTime: frontmatter.readTime || '5 min read',
  image: frontmatter.image,
  tags: frontmatter.tags || [],
  wordCount: frontmatter.wordCount
};

// Get author data
const author = getAuthor(blogPost.authorId);
if (!author) {
  throw new Error(`Author with ID "${blogPost.authorId}" not found`);
}

// Transform rawHeadingsFromPage to the TOCItem[] structure needed by TableOfContents.astro
const pageHeadings: TOCItem[] = rawHeadingsFromPage.map(h => {
  return {
    id: h.slug,    // Map slug to id
    text: h.text,
    level: h.depth // Map depth to level
  };
});

// Format date
const formatDate = (dateString: string) => {
  return new Date(dateString).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
};

// Get current URL for sharing
const currentUrl = Astro.site 
  ? new URL(Astro.url.pathname, Astro.site)
  : new URL(Astro.url.pathname, `${Astro.url.protocol}//${Astro.url.host}`);

// Breadcrumb structured data
const breadcrumbJsonLd = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  "itemListElement": [
    {
      "@type": "ListItem",
      "position": 1,
      "name": "Home",
      "item": Astro.site || "https://wanderings.skill-wanderer.com"
    },
    {
      "@type": "ListItem",
      "position": 2,
      "name": "Blog",
      "item": `${Astro.site || "https://wanderings.skill-wanderer.com"}/blog/`
    },
    {
      "@type": "ListItem",
      "position": 3,
      "name": blogPost.title,
      "item": currentUrl.toString()
    }
  ]
};
---

<BaseLayout 
  title={blogPost.title}
  description={blogPost.description}
  image={blogPost.image}
  keywords={blogPost.tags ? blogPost.tags.join(', ') : undefined}
  author={author.name}
  publishDate={blogPost.publishDate}
  modifiedDate={blogPost.modifiedDate}
  type="article"
  tags={blogPost.tags}
  category={getCategoryDisplayName(blogPost.category)}
  readTime={blogPost.readTime}
  wordCount={blogPost.wordCount}
>
  <!-- Additional structured data for blog posts -->
  <script type="application/ld+json" set:html={JSON.stringify(breadcrumbJsonLd)} slot="head" />
  
  <!-- Hero Section -->
  <section class="bg-skill-wanderer-hero-bg py-16 md:py-24">
    <div class="container mx-auto px-4 sm:px-6 lg:px-8">
      <div class="max-w-4xl mx-auto text-center">        <!-- Category Badge -->        <div class="mb-6">
          <span class="inline-block bg-skill-wanderer-primary-orange text-white text-sm font-semibold px-4 py-2 rounded-full">
            {getCategoryDisplayName(blogPost.category)}
          </span>
        </div>
        
        <!-- Title -->
        <h1 class="text-4xl md:text-5xl lg:text-6xl font-bold text-skill-wanderer-hero-text mb-6 leading-tight">
          {blogPost.title}
        </h1>
        
        <!-- Meta Information -->
        <div class="flex flex-wrap justify-center items-center gap-4 text-skill-wanderer-hero-meta mb-8">
          <div class="flex items-center space-x-2">
            <span>By {author.name}</span>
          </div>
          <div class="flex items-center space-x-2">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
            </svg>
            <span>{formatDate(blogPost.publishDate)}</span>
          </div>
          <div class="flex items-center space-x-2">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <span>{blogPost.readTime}</span>
          </div>
        </div>          <!-- Hero Image -->
        {blogPost.image && (
          <div class="rounded-lg overflow-hidden shadow-2xl">
            <Image 
              src={blogPost.image} 
              alt={blogPost.title}
              class="w-full h-80 md:h-[28rem] lg:h-[32rem] object-cover"
              width={800}
              height={512}
            />
          </div>
        )}
      </div>
    </div>
  </section>

  <!-- Main Content -->
  <div class="bg-skill-wanderer-article-bg">
    <div class="container mx-auto px-4 sm:px-6 lg:px-8 py-12">
      <div class="max-w-7xl mx-auto">
        <div class="grid lg:grid-cols-12 gap-12">
          
          <!-- Main Article -->
          <main class="lg:col-span-8">
            <article class="prose prose-lg max-w-none">
              <slot />
            </article>
              <!-- Tags -->
            {blogPost.tags && blogPost.tags.length > 0 && (
              <div class="mt-12 pt-8 border-t border-light">
                <h3 class="text-lg font-semibold text-skill-wanderer-article-headings mb-4">Tags</h3>
                <div class="flex flex-wrap gap-2">
                  {blogPost.tags.map((tag) => (
                    <span class="bg-skill-wanderer-light-gray text-skill-wanderer-article-text px-3 py-1 rounded-full text-sm hover:bg-skill-wanderer-primary-orange hover:text-white transition-colors">
                      #{tag}
                    </span>
                  ))}
                </div>
              </div>
            )}
            
            <!-- Author Bio -->
            <div class="mt-12">              <AuthorBio 
                name={author.name}
                bio={author.bio}
                avatar={author.avatar}
                social={author.social}
              />
            </div>
          </main>
          
          <!-- Sidebar -->

          <aside class="lg:col-span-4 sticky top-8 self-start">
            {pageHeadings && pageHeadings.length > 0 && (
              <TableOfContents headings={pageHeadings} />
            )}
            <div class="mt-8"> {/* Added a div for spacing */}
              <ShareButtons 
                title={blogPost.title}
                url={currentUrl.toString()}
                description={blogPost.description}
              />
            </div>
          </aside>
          
        </div>
      </div>
    </div>
  </div>
  <!-- Related Posts -->
  {relatedPosts.length > 0 && (
    <RelatedPosts 
      posts={relatedPosts}
      currentSlug={currentSlug || ''}
    />
  )}
</BaseLayout>

<style>
  /* Custom styles for the article content */
  .prose h1 {
    @apply text-3xl font-bold text-skill-wanderer-article-headings mt-8 mb-4;
  }
  
  .prose h2 {
    @apply text-2xl font-semibold text-skill-wanderer-article-headings mt-8 mb-4;
  }
  
  .prose h3 {
    @apply text-xl font-semibold text-skill-wanderer-article-headings mt-6 mb-3;
  }
  
  .prose h4 {
    @apply text-lg font-semibold text-skill-wanderer-article-headings mt-6 mb-3;
  }
  
  .prose p {
    @apply text-skill-wanderer-article-text leading-relaxed mb-6;
  }
  
  .prose ul, .prose ol {
    @apply text-skill-wanderer-article-text mb-6;
  }
  
  .prose li {
    @apply mb-2;
  }
  
  .prose pre {
    @apply bg-skill-wanderer-code-bg text-skill-wanderer-code-text rounded-lg p-4 overflow-x-auto mb-6;
  }
  
  .prose code {
    @apply bg-skill-wanderer-code-bg text-skill-wanderer-code-text px-2 py-1 rounded text-sm;
  }
  
  .prose pre code {
    @apply bg-transparent p-0;
  }
  
  .prose blockquote {
    @apply bg-skill-wanderer-blockquote-bg border-l-4 border-skill-wanderer-primary-orange text-skill-wanderer-blockquote-text italic p-6 rounded-r-lg mb-6;
  }
  
  .prose a {
    @apply text-skill-wanderer-primary-orange hover:text-skill-wanderer-orange-hover transition-colors underline;
  }
  
  .prose img {
    @apply rounded-lg shadow-lg mx-auto my-8;
  }
  
  .prose table {
    @apply w-full border-collapse mb-6;
  }
  
  .prose th, .prose td {
    @apply border border-light px-4 py-2 text-skill-wanderer-article-text;
  }
  
  .prose th {
    @apply bg-skill-wanderer-light-gray font-semibold;
  }
  
  /* Line clamp utility */
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
